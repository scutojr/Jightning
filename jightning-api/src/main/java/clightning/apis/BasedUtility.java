package clightning.apis;

import clightning.apis.annotations.ImplFor;
import clightning.apis.annotations.ParamTag;
import clightning.apis.optional.LogLevel;
import clightning.apis.response.*;

import java.io.IOException;
import java.lang.reflect.Method;

public interface BasedUtility {
    /**
     * Verifies another commandâ€™s parameters without running it.Such as, check('getLog', LogLevel.info).
     *
     * @param methodName name of the method to be checked
     * @param args       an array of input arguments used by the method being checked
     * @return
     * @see <a href=https://github.com/ElementsProject/lightning/blob/v0.7.3/doc/lightning-check.7.md>lightning-check</a>
     */
    @ImplFor("check commandtocheck")
    CheckResult check(String methodName, Object... args);

    /**
     * The counterpart to {@link #signMessage(String)}: given a node id (pubkey), signature (zbase) and a message, it verifies that
     * the signature was generated by that node for that message (more technically: by someone who knows that
     * node's secret).
     *
     * @param message the message to be checked
     * @param zbase   the signature
     * @return {@code CheckMessageResult}
     * @see <a href=https://github.com/ElementsProject/lightning/blob/v0.7.3/doc/lightning-checkmessage.7.md>lightning-checkmessage</a>
     */
    CheckMessageResult checkMessage(String message, String zbase);

    /**
     * The counterpart to {@link #signMessage(String)}: given a node id (pubkey), signature (zbase) and a message, it verifies that
     * the signature was generated by that node for that message (more technically: by someone who knows that
     * node's secret).
     *
     * @param message the message to be checked
     * @param zbase   the signature
     * @param pubKey  public key
     * @return {@code CheckMessageResult}
     * @see <a href=https://github.com/ElementsProject/lightning/blob/v0.7.3/doc/lightning-checkmessage.7.md>lightning-checkmessage</a>
     */
    CheckMessageResult checkMessage(String message, String zbase, @ParamTag(optional = true) String pubKey);

    /**
     * Show information about this node
     *
     * @return {@code LightningDaemonInfo}
     */
    LightningDaemonInfo getInfo();

    /**
     * Show logs
     *
     * @return {@code LogResult}
     */
    LogResult getLog();

    /**
     * Show logs, with optional log {level} (info|unusual|debug|io)
     *
     * @param level level of the log to be shown
     * @return {@code LogResult}
     */
    LogResult getLog(@ParamTag(optional = true) LogLevel level);

    /**
     * show help info of lightning command
     *
     * @return {@code CommandUsage}
     */
    CommandUsage[] help();

    /**
     * show help info of lightning command
     *
     * @param command command name such as getinfo, listpeers
     * @return {@code CommandUsage}
     */
    CommandUsage help(@ParamTag(optional = true) String command);

    /**
     * List all configuration options
     *
     * @return {@code Configuration}
     */
    @ImplFor("listconfigs [config]")
    Configuration listConfigs();

    /**
     * Display all funds available, either in unspent outputs (UTXOs) in the internal wallet or funds
     * locked in currently open channels.
     *
     * @return {@code Funds} in the internal wallet
     * @see <a href=https://github.com/ElementsProject/lightning/blob/v0.7.3/doc/lightning-listfunds.7.md>lightning-listfunds</a>
     */
    Funds listFunds();

    /**
     * Create a digital signature of message using this node's secret key. A receiver who knows your node's id and
     * the message can be sure that the resulting signature could only be created by something with access to this
     * node's secret key.
     *
     * @param message message to be signed
     * @return {@code SignResult}
     * @see <a href=https://github.com/ElementsProject/lightning/blob/v0.7.3/doc/lightning-signmessage.7.md>lightning-signmessage</a>
     */
    SignResult signMessage(String message);

    /**
     * Shut down the lightningd process
     *
     * @return the stop information
     */
    String stop();
}
