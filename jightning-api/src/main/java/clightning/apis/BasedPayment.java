package clightning.apis;

import clightning.apis.optional.InvoiceParams;
import clightning.apis.optional.ListSendPaysParams;
import clightning.apis.optional.SendPayParams;
import clightning.apis.response.*;

public interface BasedPayment {
    /**
     * decodepay bolt11 [description]
     * Decode {bolt11}, using {description} if necessary
     */
    Bolt11 decodePay(String bolt11);

    Bolt11 decodePay(String bolt11, String description);

    /**
     * https://lightning.readthedocs.io/lightning-delexpiredinvoice.7.html
     * <p>
     * delexpiredinvoice [maxexpirytime]
     * Delete all expired invoices that expired as of given {maxexpirytime} (a UNIX epoch time), or all expired invoices if not specified
     */
    void delExpiredInvoice();

    void delExpiredInvoice(int maxExpiryTimeSec);

    /**
     * delinvoice label status
     * Delete unpaid invoice {label} with {status}
     */
    DetailedInvoice delInvoice(String label, InvoiceStatus status);

    /**
     * https://lightning.readthedocs.io/lightning-invoice.7.html
     * <p>
     * invoice msatoshi label description [expiry] [fallbacks] [preimage] [exposeprivatechannels]
     * Create an invoice for {msatoshi} with {label} and {description} with optional {expiry} seconds (default 1 week), optional {fallbacks} address list(default empty list) and optional {preimage} (default autogenerated)
     * <p>
     * expiry: <numeric value>[s|m|h|d|w], indicate seconds,
     * minutes, hours, days and weeks respectively, s by
     * default if suffix is omitting. Default to 604800 (1w)
     * <p>
     * fallbacks: one or more fallback addresses to include in the invoice
     * <p>
     * The preimage is a 64-digit hex string to be used as payment preimage for the created
     * invoice. By default, if unspecified, lightningd will generate a secure pseudorandom
     * preimage seeded from an appropriate entropy source on your system. IMPORTANT: if you
     * specify the preimage, you are responsible, to ensure appropriate care for generating
     * using a secure pseudorandom generator seeded with sufficient entropy, and keeping the
     * preimage secret. This parameter is an advanced feature intended for use with cutting-edge
     * cryptographic protocols and should not be used unless explicitly needed.
     * <p>
     * If specified, exposeprivatechannels overrides the default route hint logic, which will
     * use unpublished channels only if there are no published channels. If true unpublished
     * channels are always considered as a route hint candidate; if false, never.
     */
    SimpleInvoice invoice(long msatoshi, String label, String description);

    SimpleInvoice invoice(long msatoshi, String label, String description, InvoiceParams optionalParams);

    /**
     * listinvoices [label]
     * Show invoice {label} (or all, if no {label})
     */
    DetailedInvoice[] listInvoices();

    DetailedInvoice[] listInvoices(String label);

    /**
     * listsendpays [bolt11] [payment_hash]
     * Show sendpay, old and current, optionally limiting to {bolt11} or {payment_hash}.
     */
    PayResult[] listSendPays();

    PayResult[] listSendPays(ListSendPaysParams optionalParams);

    /**
     * listtransactions
     * List transactions that we stored in the wallet
     */
    Transaction[] listTransactions();

    /**
     * lightning-cli sendpay '[{"msatoshi": 11, "direction": 1, "amount_msat": "11msat", "delay": 9, "id": "036c0793141c045a9e1e50efaa2740def367800580ecad7d31268103f9b9e97472", "channel": "507x1x0"}]' d18ba6bf223f94c5ead6aba6d95d98fbe88b2a30087fa9c7ee8a4f8b21a95363
     * <p>
     * sendpay route payment_hash [label] [msatoshi] [bolt11]
     * Send along {route} in return for preimage of {payment_hash}
     */
    SendPayResult sendPay(Route[] route, String paymentHash);

    SendPayResult sendPay(Route[] route, String paymentHash, SendPayParams optionalParams);

    /**
     * waitanyinvoice [lastpay_index]
     * Wait for the next invoice to be paid, after {lastpay_index} (if supplied)
     */
    DetailedInvoice waitAnyInvoice(int lastPayIndex);

    /**
     * https://lightning.readthedocs.io/lightning-waitanyinvoice.7.html
     * <p>
     * waitinvoice label
     * Wait for an incoming payment matching the invoice with {label}, or if the invoice expires
     */
    DetailedInvoice waitInvoice(String label);

    /**
     * waitsendpay payment_hash [timeout]
     * Wait for payment attempt on {payment_hash} to succeed or fail, but only up to {timeout} seconds.
     */
    PayResult waitSendPay(String paymentHash);

    PayResult waitSendPay(String paymentHash, long timeout);
}
